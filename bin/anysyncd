#!/usr/bin/perl

=head1 NAME

Anysyncd - event driven sync framework

=head1 DESCRIPTION

Anysyncd provides a generic framework to synchronize files as they change. It
uses AnyEvent::Filesys::Notify to monitor files for changes and supports Plugins
for the actual synchronisation.

Currently a simple L<Rsync|AnySyncd::Action::Rsync> action and  a more complex
L<Csync2|AnySyncd::Action::CSync2> action are provided by the anysyncd
distribution.  See L<Csync2|AnySyncd::Action::CSync2> and
L<AnySyncd::Action::Rsync> for details.

=head2 Configuration File

Configuration happens in F</etc/anysyncd/anysyncd.ini>. F<anysyncd.ini> is a
section driven ini file. Each directory to be watched and synced (a syncer) has
it's own ini section. The I<global> section contains configuration options
global to the whole framework. Also, all options from the I<global> section
are passed down to the syncer configuration, i.e. syncers can share common
options via the glocbal section.

=head3 Global options

=over

=item C<logfile> I<filename>

The logfile for the AnySyncd Daemon. Defaults to /var/log/anysyncd.log.

=item C<loglevel> I<loglevel>

log4perl compatible loglevel, set to DEBUG for debugging. Defaults to INFO.

=back

=head3 Syncer options

These options are interpreted by syncers, but may also be defined in the global
section in which case they take effect for all syncers, unless overridden.

=over

=item C<handler> I<classname of handler>

The handler responsible for syncing. (e.g. Anysyncd::Action::Rsync)

=item C<watcher> I<directory or filename>

The file- or directoryname that shall be monitored for changes.

=item C<filter> I<regular expression>

A regular expression that describes files that should be ignored from the
watcher. Please note that currently, this doesn't prevent these files from
getting synced by the Rsync or CSync2 actions.  To ignore some typical
tempfiles from several editors try for example: \.(swp|tmp)$ as a filter.

=item C<cron> I<cron spec>

A cron spec makes it possible to regulary execute a sync. To execute a sync
every minute, regardless of any changes try: */1 * * * * as a cron spec.

=item C<noop_file> I<filename>

If this option is present, the syncer can be put to sleep by deleting or
creating I<filename>. As long as the file is present, the syncer will operate
normally. If the file is deleted, the syncer will stop watching and syncing.
If the file is created again, this will be detected by a cron event and the
syncer will resume. So you should always use the cron option also, if you
choose to use the noop_file option.

=item C<admin_to> I<email address>

In addition to error logging, it is possible to have anysyncd report grave
errors by email. This feature is enabled by configuring both admin_to and
admin_from options.

=item C<admin_from> I<email address>

In addition to error logging, it is possible to have anysyncd report grave
errors by email. This feature is enabled by configuring both admin_to and
admin_from options.

=item C<waiting_time> I<integer>

This defines the length of the grace period a syncer will wait for more file
events after the first event, before it will execute the sync action.

=back

=cut

use strict;
use warnings;

use FindBin;
use lib "$FindBin::Bin/../lib";

use lib 'lib/';

use Anysyncd::Daemon;

my $daemon      = Anysyncd::Daemon->new_with_options();

my ($command) = @{ $daemon->extra_argv };
defined $command || die "No command specified";

$daemon->start   if $command eq 'start';
$daemon->status  if $command eq 'status';
$daemon->restart if $command eq 'restart';
$daemon->stop    if $command eq 'stop';

exit( $daemon->exit_code );

=pod

=head1 LICENSE

This is released under the MIT License. See the B<COPYRIGHT> file.

=head1 AUTHOR

Alexander Wirt <alexander.wirt@credativ.de>,
Carsten Wolff <carsten.wolff@credativ.de>

=cut
